name: Publish

on:
  push:
    branches:
      - feat/publish_package

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[github]"
          pip install ".[dev]"

      - name: Run Test
        env:
          GITHUB_ORG: ${{ secrets.GH_ORG }}
          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          PYTHONPATH: ${GITHUB_WORKSPACE}
        run: |
          pytest

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Verify PyPI Token Presence
        run: |
          if [ -z "${{ secrets.PYPI_TOKEN }}" ]; then
            echo "WARNING: PYPI_TOKEN is not set!"
            exit 1
          else
            echo "PYPI_TOKEN is set. Will be used for publishing."
          fi
        
      # First, use semantic-release just for versioning
      - name: Python Semantic Release for versioning
        id: release
        uses: python-semantic-release/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          pypi_token: ${{ secrets.PYPI_TOKEN }}
          
      - name: Build and Publish Package
        run: |
          # Install build tools
          pip install build twine
          
          # Build the package using a temp directory approach
          TEMP_DIR=$(mktemp -d)
          cp -r . $TEMP_DIR/
          cd $TEMP_DIR
          
          # Temporarily modify pyproject.toml to remove GitHub dependencies
          python -c "
          import toml
          with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
          # We don't need to modify anything since Git dependencies are already in optionals
          # Just build the package as is
          "
          
          # Build the package in the temp directory
          python -m build
          
          echo "Built package files:"
          ls -la dist/
          
          # Upload to PyPI
          echo "Uploading to PyPI..."
          python -m twine upload dist/* --verbose --non-interactive -u __token__ -p ${{ secrets.PYPI_TOKEN }}