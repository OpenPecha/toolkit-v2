name: Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install ".[dev]"

      - name: Run Test
        env:
          GITHUB_ORG: ${{ secrets.GH_ORG }}
          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          PYTHONPATH: ${GITHUB_WORKSPACE}
        run: |
          pytest

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Verify PyPI Token Presence
        run: |
          if [ -z "${{ secrets.PYPI_TOKEN }}" ]; then
            echo "WARNING: PYPI_TOKEN is not set!"
            exit 1
          else
            echo "PYPI_TOKEN is set. Will be used for publishing."
          fi
          
      - name: Python Semantic Release with Debug
        id: release
        uses: python-semantic-release/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          pypi_token: ${{ secrets.PYPI_TOKEN }}
          additional_options: "-vv --upload-to-pypi"
        
      # Explicit build and publish as a backup
      - name: Build and Publish Package (Backup)
        if: success()
        run: |
          pip install build twine
          python -m build
          echo "Built package files:"
          ls -la dist/
          echo "Uploading to PyPI..."
          python -m twine upload dist/* --verbose --non-interactive -u __token__ -p ${{ secrets.PYPI_TOKEN }}